#version 450

// tessellation evaluation shader

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout( quads, equal_spacing, ccw ) in;

layout ( location = 0 ) in vec3 tes_position[];
layout ( location = 1 ) in vec2 tes_uv[];

// layout ( location = 0 ) out vec2 frag_uv;

layout ( set = 0, binding = 1 ) uniform TESArgument {
	mat4 mvp;
};

layout ( set = 0, binding = 2 ) uniform sampler terrainSampler;
layout ( set = 0, binding = 3 ) uniform texture2D terrainTexture;

//vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2, vec2 v3)
//{
//	float x = ((v3 - v0) * gl_TessCoord.x + v0.x) + ((v2.x - v1.x) * gl_TessCoord.x + v1.x);
//	x = x / 2;
//	float y = ((v3.y - v1.y) * gl_TessCoord.y + v1.y) + ((v2.y - v0.y) * gl_TessCoord.y + v0.y);
//	y = y / 2;
//	return vec2( x, y );
//}

//vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2, vec3 v3 )
//{
    //(v1 - v0)
	//return vec3( x, 0.0f, z );
//}

void main() {
	vec2 frag_uv =gl_TessCoord.xy;// interpolate2D( tes_uv[0], tes_uv[1], tes_uv[2], tes_uv[3] );
	vec4 rgba = texture( sampler2D(terrainTexture, terrainSampler), frag_uv);
	vec3 frag_position = vec3( gl_TessCoord.x, 0, gl_TessCoord.y ); //interpolate3D(tes_position[0], tes_position[1], tes_position[2],  tes_position[3]);
	frag_position.y = rgba.r*32;
	gl_Position = mvp * vec4( frag_position, 1.0f );
	gl_Position.y *= -1;
}