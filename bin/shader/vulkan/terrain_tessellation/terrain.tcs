#version 450

// tessellation control shader 

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable


layout ( location = 0 ) in vec3 tcs_position[];
layout ( location = 1 ) in vec2 tcs_uv[];

layout ( location = 0 ) out vec3 tes_position[];
layout ( location = 1 ) out vec2 tes_uv[];

layout ( vertices = 4 ) out;

layout ( set = 0, binding = 0 ) uniform TCSArgument {
	mat4 model;
	vec3 eye;
};

const float maxTessLevel = 64.0f;

float calcTessLevelOuter( vec3 _point1, vec3 _point2, vec3 _eye ) {
	//vec3 pt = ( _point1 + _point2 ) / 2.0f;
	//pt = ( model * vec4(pt,1.0f) ).xyz;
	float distance = length( _eye - _point1 * maxTessLevel );
	float m = mod(distance, maxTessLevel);
	float times = floor( distance / maxTessLevel );
	float tessLevel = maxTessLevel / pow(2,times) ;// ( 1.0f + m/maxTessLevel );
	return floor(tessLevel);
}

void main() {
	tes_position[gl_InvocationID] = tcs_position[gl_InvocationID];
	tes_uv[gl_InvocationID] = tcs_uv[gl_InvocationID];
	//
	gl_TessLevelOuter[0] = calcTessLevelOuter( tes_position[0], tes_position[3], eye );
	gl_TessLevelOuter[1] = calcTessLevelOuter( tes_position[1], tes_position[0], eye );
	gl_TessLevelOuter[2] = calcTessLevelOuter( tes_position[2], tes_position[1], eye );
	gl_TessLevelOuter[3] = calcTessLevelOuter( tes_position[3], tes_position[2], eye );
	//
	gl_TessLevelInner[0] = (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2] + gl_TessLevelOuter[3] ) / 4;
	gl_TessLevelInner[1] = gl_TessLevelInner[0];
}